// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id                    String               @id @default(cuid())
  email                 String               @unique
  name                  String?
  password              String               // Hashed password
  avatar                String?
  role                  UserRole             @default(USER)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  isVerified            Boolean              @default(false)
  lastLogin             DateTime?
  twoFactorEnabled      Boolean              @default(false)
  workHoursPerWeek      Int?                 @default(40)
  timezone              String?
  ownedGroups          Group[]              @relation("GroupOwner")
  memberGroups         GroupMember[]
  createdTasks         Task[]               @relation("TaskCreator")
  assignedTasks        TaskAssignment[]
  comments             Comment[]
  notifications        Notification[]
  timeEntries          TimeEntry[]
  activityLogs         ActivityLog[]
  messages             Message[]            @relation("MessageSender")
  receivedMessages     Message[]            @relation("MessageReceiver")
  reviews              TaskReview[]         @relation("ReviewCreator")
  tasksToReview        TaskReview[]         @relation("ReviewAssignee")
  achievements         UserAchievement[]
}

enum UserRole {
  ADMIN
  USER
  CLIENT
}
model Group {
  id                    String               @id @default(cuid())
  name                  String
  description          String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  isArchived           Boolean              @default(false)
  visibility           GroupVisibility      @default(PRIVATE)
  maxMembers           Int                  @default(50)
  settings             Json?                // Store group-specific settings
  owner                User                 @relation("GroupOwner", fields: [ownerId], references: [id])
  ownerId              String
  members              GroupMember[]
  tasks                Task[]
  channels             Channel[]
  documents            Document[]
  events               Event[]
}

enum GroupVisibility {
  PUBLIC
  PRIVATE
  ORGANIZATION
}

model GroupMember {
  id                    String               @id @default(cuid())
  group                Group                @relation(fields: [groupId], references: [id])
  groupId              String
  user                 User                 @relation(fields: [userId], references: [id])
  userId               String
  role                 GroupRole            @default(MEMBER)
  joinedAt             DateTime             @default(now())
  permissions          Json?                // Custom member permissions
  
  @@unique([groupId, userId])
}

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
  GUEST
}
model Task {
  id                    String               @id @default(cuid())
  title                String
  description          String?
  status               TaskStatus           @default(PENDING)
  priority             TaskPriority         @default(MEDIUM)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  startDate            DateTime?
  dueDate              DateTime?
  completedAt          DateTime?
  estimatedHours       Float?
  actualHours          Float?
  tags                 String[]
  attachments          Attachment[]
  group                Group                @relation(fields: [groupId], references: [id])
  groupId              String
  parent               Task?                @relation("SubTasks", fields: [parentId], references: [id])
  parentId             String?
  subtasks             Task[]               @relation("SubTasks")
  creator              User                 @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId            String
  assignments          TaskAssignment[]
  dependencies         TaskDependency[]     @relation("DependentTask")
  dependentOn          TaskDependency[]     @relation("RequiredTask")
  comments             Comment[]
  timeEntries          TimeEntry[]
  reviews              TaskReview[]
  checklist            ChecklistItem[]
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model TaskAssignment {
  id                    String               @id @default(cuid())
  task                 Task                 @relation(fields: [taskId], references: [id])
  taskId               String
  assignee             User                 @relation(fields: [assigneeId], references: [id])
  assigneeId           String
  assignedAt           DateTime             @default(now())
  role                 AssignmentRole       @default(RESPONSIBLE)
  
  @@unique([taskId, assigneeId])
}

enum AssignmentRole {
  RESPONSIBLE
  ACCOUNTABLE
  CONSULTED
  INFORMED
}

model TaskDependency {
  id                    String               @id @default(cuid())
  dependentTask        Task                 @relation("DependentTask", fields: [dependentTaskId], references: [id])
  dependentTaskId      String
  requiredTask         Task                 @relation("RequiredTask", fields: [requiredTaskId], references: [id])
  requiredTaskId       String
  type                 DependencyType       @default(FINISH_TO_START)
  
  @@unique([dependentTaskId, requiredTaskId])
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}
model Comment {
  id                    String               @id @default(cuid())
  content              String
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  isEdited             Boolean              @default(false)
  task                 Task                 @relation(fields: [taskId], references: [id])
  taskId               String
  author               User                 @relation(fields: [authorId], references: [id])
  authorId             String
  attachments          Attachment[]
}

model Message {
  id                    String               @id @default(cuid())
  content              String
  createdAt            DateTime             @default(now())
  readAt               DateTime?
  sender               User                 @relation("MessageSender", fields: [senderId], references: [id])
  senderId             String
  receiver             User                 @relation("MessageReceiver", fields: [receiverId], references: [id])
  receiverId           String
  attachments          Attachment[]
}

model Document {
  id                    String               @id @default(cuid())
  title                String
  content              String
  version              Int                  @default(1)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  group                Group                @relation(fields: [groupId], references: [id])
  groupId              String
  attachments          Attachment[]
}

model TimeEntry {
  id                    String               @id @default(cuid())
  startTime            DateTime
  endTime              DateTime?
  description          String?
  user                 User                 @relation(fields: [userId], references: [id])
  userId               String
  task                 Task                 @relation(fields: [taskId], references: [id])
  taskId               String
}


model TaskReview {
  id                    String               @id @default(cuid())
  status               ReviewStatus         @default(PENDING)
  feedback             String?
  createdAt            DateTime             @default(now())
  completedAt          DateTime?
  task                 Task                 @relation(fields: [taskId], references: [id])
  taskId               String
  reviewer             User                 @relation("ReviewCreator", fields: [reviewerId], references: [id])
  reviewerId           String
  assignee             User                 @relation("ReviewAssignee", fields: [assigneeId], references: [id])
  assigneeId           String
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  CHANGES_REQUESTED
}


model Channel {
  id                    String               @id @default(cuid())
  name                 String
  description          String?
  type                 ChannelType          @default(GENERAL)
  group                Group                @relation(fields: [groupId], references: [id])
  groupId              String
}

enum ChannelType {
  GENERAL
  ANNOUNCEMENTS
  TASK_UPDATES
  SOCIAL
}

model Event {
  id                    String               @id @default(cuid())
  title                String
  description          String?
  startTime            DateTime
  endTime              DateTime
  location             String?
  isVirtual            Boolean              @default(false)
  meetingLink          String?
  group                Group                @relation(fields: [groupId], references: [id])
  groupId              String
}

model Notification {
  id                    String               @id @default(cuid())
  type                 NotificationType
  content              String
  isRead               Boolean              @default(false)
  createdAt            DateTime             @default(now())
  user                 User                 @relation(fields: [userId], references: [id])
  userId               String
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  COMMENT_ADDED
  REVIEW_REQUESTED
  DEADLINE_APPROACHING
  MENTION
}

model Attachment {
  id                    String               @id @default(cuid())
  filename             String
  fileType             String
  fileSize             Int
  url                  String
  uploadedAt           DateTime             @default(now())
  tasks                Task[]
  comments             Comment[]
  documents            Document[]
  messages             Message[]
}

model ChecklistItem {
  id                    String               @id @default(cuid())
  content              String
  isCompleted          Boolean              @default(false)
  order                Int
  task                 Task                 @relation(fields: [taskId], references: [id])
  taskId               String
}

model ActivityLog {
  id                    String               @id @default(cuid())
  action               String
  details              Json?
  createdAt            DateTime             @default(now())
  user                 User                 @relation(fields: [userId], references: [id])
  userId               String
}

model UserAchievement {
  id                    String               @id @default(cuid())
  achievementType      AchievementType
  awardedAt            DateTime             @default(now())
  user                 User                 @relation(fields: [userId], references: [id])
  userId               String
}

enum AchievementType {
  TASK_MASTER
  TEAM_PLAYER
  DEADLINE_CHAMPION
  QUALITY_GURU
  PRODUCTIVITY_STAR
}