generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  name              String?
  password          String?
  avatar            String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isVerified        Boolean           @default(false)
  lastLogin         DateTime?
  twoFactorEnabled  Boolean           @default(false)
  workHoursPerWeek  Int?              @default(40)
  timezone          String?
  emailVerified     DateTime?
  image             String?
  resetToken        String?           @unique
  resetTokenExpiry  DateTime?
  verificationToken String?           @unique
  role              UserRole          @default(USER)
  accounts          Account[]
  activityLogs      ActivityLog[]
  comments          Comment[]
  ownedGroups       Group[]           @relation("GroupOwner")
  sentInvitations   GroupInvitation[]
  groupMemberships  GroupMember[]
  sentMessages      Message[]         @relation("MessageSender")
  receivedMessages  Message[]         @relation("MessageReceiver")

  mentionedIn     Message[]      @relation("MessageMentions")
  reactions       Reaction[]
  announcements   Announcement[]

  notifications     Notification[]
  sessions          Session[]
  createdTasks      Task[]            @relation("TaskCreator")
  assignedTasks     TaskAssignment[]
  tasksToReview     TaskReview[]      @relation("ReviewAssignee")
  reviews           TaskReview[]      @relation("ReviewCreator")
  timeEntries       TimeEntry[]
  achievements      UserAchievement[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Group {
  id          String            @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  isArchived  Boolean           @default(false)
  visibility  GroupVisibility?
  maxMembers  Int               @default(50)
  settings    Json?
  ownerId     String
  channels    Channel[]

  announcements Announcement[]
  documents   Document[]
  events      Event[]
  owner       User              @relation("GroupOwner", fields: [ownerId], references: [id])
  invitations GroupInvitation[]
  members     GroupMember[]
  tasks       Task[]
}

model GroupMember {
  id          String    @id @default(cuid())
  groupId     String
  userId      String
  role        GroupRole @default(MEMBER)
  joinedAt    DateTime  @default(now())
  permissions Json?
  group       Group     @relation(fields: [groupId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([groupId, userId])
}

model Task {
  id             String           @id @default(cuid())
  title          String
  description    String?
  status         TaskStatus       @default(PENDING)
  priority       TaskPriority     @default(MEDIUM)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  startDate      DateTime?
  dueDate        DateTime?
  completedAt    DateTime?
  estimatedHours Float?
  actualHours    Float?
  tags           String[]
  groupId        String
  parentId       String?
  creatorId      String
  checklist      ChecklistItem[]
  comments       Comment[]
  creator        User             @relation("TaskCreator", fields: [creatorId], references: [id])
  group          Group            @relation(fields: [groupId], references: [id])
  parent         Task?            @relation("SubTasks", fields: [parentId], references: [id])
  subtasks       Task[]           @relation("SubTasks")
  assignments    TaskAssignment[]
  dependencies   TaskDependency[] @relation("DependentTask")
  dependentOn    TaskDependency[] @relation("RequiredTask")
  reviews        TaskReview[]
  timeEntries    TimeEntry[]
  attachments    Attachment[]     @relation("AttachmentToTask")
}

model TaskAssignment {
  id         String         @id @default(cuid())
  taskId     String
  assigneeId String
  assignedAt DateTime       @default(now())
  role       AssignmentRole @default(RESPONSIBLE)
  assignee   User           @relation(fields: [assigneeId], references: [id])
  task       Task           @relation(fields: [taskId], references: [id])

  @@unique([taskId, assigneeId])
}

model TaskDependency {
  id              String         @id @default(cuid())
  dependentTaskId String
  requiredTaskId  String
  type            DependencyType @default(FINISH_TO_START)
  dependentTask   Task           @relation("DependentTask", fields: [dependentTaskId], references: [id])
  requiredTask    Task           @relation("RequiredTask", fields: [requiredTaskId], references: [id])

  @@unique([dependentTaskId, requiredTaskId])
}

model Comment {
  id          String       @id @default(cuid())
  content     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isEdited    Boolean      @default(false)
  taskId      String
  authorId    String
  author      User         @relation(fields: [authorId], references: [id])
  task        Task         @relation(fields: [taskId], references: [id])
  attachments Attachment[] @relation("AttachmentToComment")
}

model Message {
  id          String       @id @default(cuid())
  content     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  senderId    String
  channelId   String
  parentId    String?      // For threaded messages
  mentions    User[]       @relation("MessageMentions")
  reactions   Reaction[]
  sender      User         @relation("MessageSender", fields: [senderId], references: [id])
  receiver    User         @relation("MessageReceiver", fields: [receiverId], references: [id])
  receiverId  String
  channel     Channel      @relation(fields: [channelId], references: [id])
  parent      Message?     @relation("ThreadedMessages", fields: [parentId], references: [id])
  replies     Message[]    @relation("ThreadedMessages")
  attachments Attachment[] @relation("AttachmentToMessage")
  notifications Notification[]
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  createdAt DateTime @default(now())
  userId    String
  messageId String
  user      User     @relation(fields: [userId], references: [id])
  message   Message  @relation(fields: [messageId], references: [id])

  @@unique([userId, messageId, emoji])
}
model Document {
  id          String       @id @default(cuid())
  title       String
  content     String
  version     Int          @default(1)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  groupId     String
  group       Group        @relation(fields: [groupId], references: [id])
  attachments Attachment[] @relation("AttachmentToDocument")
}

model TimeEntry {
  id          String    @id @default(cuid())
  startTime   DateTime
  endTime     DateTime?
  description String?
  userId      String
  taskId      String
  task        Task      @relation(fields: [taskId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model TaskReview {
  id          String       @id @default(cuid())
  status      ReviewStatus @default(PENDING)
  feedback    String?
  createdAt   DateTime     @default(now())
  completedAt DateTime?
  taskId      String
  reviewerId  String
  assigneeId  String
  assignee    User         @relation("ReviewAssignee", fields: [assigneeId], references: [id])
  reviewer    User         @relation("ReviewCreator", fields: [reviewerId], references: [id])
  task        Task         @relation(fields: [taskId], references: [id])
}

model Channel {
  id          String      @id @default(cuid())
  name        String
  description String?
  type        ChannelType @default(GENERAL)
  groupId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt 
  messages    Message[]
  group       Group       @relation(fields: [groupId], references: [id])
}


model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  isVirtual   Boolean  @default(false)
  meetingLink String?
  groupId     String
  group       Group    @relation(fields: [groupId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  content   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  userId    String
  messageId String?          // Optional, for message-related notifications
  user      User             @relation(fields: [userId], references: [id])
  message   Message?         @relation(fields: [messageId], references: [id])
}


model Attachment {
  id         String     @id @default(cuid())
  filename   String
  fileType   String
  fileSize   Int
  url        String
  uploadedAt DateTime   @default(now())
  comments   Comment[]  @relation("AttachmentToComment")
  documents  Document[] @relation("AttachmentToDocument")
  messages   Message[]  @relation("AttachmentToMessage")
  tasks      Task[]     @relation("AttachmentToTask")
}

model ChecklistItem {
  id          String  @id @default(cuid())
  content     String
  isCompleted Boolean @default(false)
  order       Int
  taskId      String
  task        Task    @relation(fields: [taskId], references: [id])
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String
  details   Json?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model UserAchievement {
  id              String          @id @default(cuid())
  achievementType AchievementType
  awardedAt       DateTime        @default(now())
  userId          String
  user            User            @relation(fields: [userId], references: [id])
}

model GroupInvitation {
  id        String       @id @default(cuid())
  email     String
  role      GroupRole    @default(MEMBER)
  status    InviteStatus @default(PENDING)
  message   String?
  groupId   String
  inviterId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  group     Group        @relation(fields: [groupId], references: [id])
  inviter   User         @relation(fields: [inviterId], references: [id])
}
model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groupId   String
  authorId  String
  group     Group    @relation(fields: [groupId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
}

enum UserRole {
  ADMIN
  USER
  CLIENT
}

enum GroupVisibility {
  PUBLIC
  PRIVATE
  ORGANIZATION
}

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
  GUEST
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AssignmentRole {
  RESPONSIBLE
  ACCOUNTABLE
  CONSULTED
  INFORMED
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  CHANGES_REQUESTED
}

enum ChannelType {
  GENERAL
  ANNOUNCEMENTS
  TASK_UPDATES
  SOCIAL
  PROJECT
  TEAM
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  COMMENT_ADDED
  REVIEW_REQUESTED
  DEADLINE_APPROACHING
  MENTION
  MESSAGE_RECEIVED
  ANNOUNCEMENT_POSTED
  REACTION_ADDED
}

enum AchievementType {
  TASK_MASTER
  TEAM_PLAYER
  DEADLINE_CHAMPION
  QUALITY_GURU
  PRODUCTIVITY_STAR
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}
